View(GFN_country)
#get and request
GFN_country <- GET(url=paste0(url_country,'?users/',username))
View(GFN_country)
#get and request
GFN_country <- GET(url=paste0(url_country,'&users/',username))
View(GFN_country)
View(GFN_country)
#get and request
GFN_country <- GET(url=paste0(url_country,username))
View(GFN_country)
#get and request
GFN_country <- GET(url=url_country)
View(GFN_country)
url_country
#get and request
GFN_country <- GET(url="https://api.footprintnetwork.org/v1/data/5001/all/BCtot,EFCtot")
View(GFN_country)
View(GFN_country)
urle
url
#get and request
GFN_country <- GET(url=base, path="countries")
View(GFN_country)
GFN_country <- GET(url=paste0(url_country, '/countries'))
View(GFN_country)
base
install.packages(curl)
install.packages("curl")
session = curl_(request)
session = curl(request)
login = 'ashleythy';
password = '1o8uB8Oi8m111aqRarkDIF3Vfd8FmtJemkavEk1Agh46C5HuTt7i';
request = 'http://api.footprintnetwork.org/v1/countries';
session = curl(request)
library(curl)
login = 'ashleythy';
password = '1o8uB8Oi8m111aqRarkDIF3Vfd8FmtJemkavEk1Agh46C5HuTt7i';
request = 'http://api.footprintnetwork.org/v1/countries';
session = curl(request)
session
session$headers
open(session)
#get and request
GFN_country <- GET(url=base, authenticate(username))
#get and request
GFN_country <- GET(url=base, authenticate('any-login', username))
View(GFN_country)
base
username
library(httr)
library(jsonlite)
#API key
username <- '1o8uB8Oi8m111aqRarkDIF3Vfd8FmtJemkavEk1Agh46C5HuTt7i'
#base
base <- "http://api.footprintnetwork.org/v1/"
#country as endpoint
endpoint_country <- "countries"
#url
url_country <- paste(base,endpoint_country, sep= "")
#get and request
GFN_country <- GET(url=base, authenticate('any-login', username))
View(GFN_country)
#API key
username <- '1o8uB8Oi8m111aqRarkDIF3Vfd8FmtJemkavEk1Agh46C5HuTt7i'
#base
base <- "http://api.footprintnetwork.org/v1/"
#country as endpoint
endpoint_country <- "countries"
#url
url_country <- paste(base,endpoint_country, sep= "")
#get and request
GFN_country <- GET(url=base, authenticate('any-login', username))
#get and request
GFN_country <- GET(url=paste(base,'countries',sep=""), authenticate('any-login', username))
View(GFN_country)
paste(base,'countries',sep="")
r <- GET("http://httpbin.org/get")
View(r)
G <- GET("https://api.footprintnetwork.org/v1/countries")
View(G)
login = 'any-user';
password = '1o8uB8Oi8m111aqRarkDIF3Vfd8FmtJemkavEk1Agh46C5HuTt7i';
request = 'http://api.footprintnetwork.org/v1/countries';
session = curl(request)
open(session)
request = 'http://api.footprintnetwork.org/v1/types';
session = curl(request)
open(session)
getURL("https://api.footprintnetwork.org/v1/countries", userpwd="key:1o8uB8Oi8m111aqRarkDIF3Vfd8FmtJemkavEk1Agh46C5HuTt7i", httpauth = 1L)
#API key
ppp <- '1o8uB8Oi8m111aqRarkDIF3Vfd8FmtJemkavEk1Agh46C5HuTt7i'
#get and request
GFN_country <- GET(url=paste(base,'countries',sep=""), authenticate('any-login', ppp))
#get and request
GFN_country <- GET(url=paste(base,'countries',sep=""), authenticate('any-login', ppp))
View(GFN_country)
#API key
username <- '1o8uB8Oi8m111aqRarkDIF3Vfd8FmtJemkavEk1Agh46C5HuTt7i'
#get and request
GFN_country <- GET(url=paste(base,'countries',sep=""), authenticate('any-login', username))
View(GFN_country)
#install and load packages
install.packages(c("httr","jsonlite"))
install.packages("curl")
library(httr)
library(jsonlite)
#API key
username <- '1o8uB8Oi8m111aqRarkDIF3Vfd8FmtJemkavEk1Agh46C5HuTt7i'
#base
base <- "http://api.footprintnetwork.org/v1/"
#country as endpoint
endpoint_country <- "countries"
#url
url_country <- paste(base,endpoint_country, sep= "")
#get and request
GFN_country <- GET(url=paste(base,'countries',sep=""), authenticate('any-login', username))
View(GFN_country)
names(GFN_country)
status_code(GFN_country)
headers(GFN_country)
content(GFN_country)
a <- data.frame(content(GFN_country))
paste(base,url_country,sep="")
View(GFN_country)
install.packages("brms")
library(rethinking)
data(foxes)
View(foxes)
brm(data=foxes, family=gaussian,
weight ~ 1+ area,
prior = c(set_prior("normal(0, 2)", class = "Intercept"),
set_prior("normal(0, 2)", class = "b"),
set_prior("cauchy(0, 2)", class = "sigma")),
chains = 4, iter = 2000, warmup = 500, cores = 4)
library(brms)
library(brms)
install.packages("brms")
install.dependencies("shinystan")
install.packages("shinystan", dependencies=TRUE)
install.packages("igraph")
pkgbuild::has_build_tools(debug = TRUE)
install.packages("pkgbuild")
pkgbuild::has_build_tools(debug = TRUE)
intall.packages("brms", dependencies=TRUE)
install.packages("brms", dependencies=TRUE)
library(rstan)
library(brms)
library(BRMS)
.libPaths()
install.packages('igraph')
pkgbuild::has_build_tools(debug = TRUE)
pkgbuild::has_build_tools(debug = TRUE)
fx <- inline::cxxfunction( signature(x = "integer", y = "numeric" ) , '
return ScalarReal( INTEGER(x)[0] * REAL(y)[0] ) ;
' )
fx( 2L, 5 ) # should be 10
dotR <- file.path(Sys.getenv("HOME"), ".R")
if (!file.exists(dotR))
dir.create(dotR)
M <- file.path(dotR, "Makevars.win")
if (!file.exists(M))
file.create(M)
cat("\nCXX14FLAGS=-O3 -Wno-unused-variable -Wno-unused-function",
"CXX14 = $(BINPREF)g++ -m$(WIN) -std=c++1y",
"CXX11FLAGS=-O2 -Wno-unused-variable -Wno-unused-function",
file = M, sep = "\n", append = TRUE)
install.packages("brms", dependencies = TRUE)
install.packages("shinystan")
install.packages("igraph")
library(tidyverse)
install.packages("pkgbuild")
pkgbuild::has_build_tools(debug = TRUE)
fx <- inline::cxxfunction( signature(x = "integer", y = "numeric" ) , '
return ScalarReal( INTEGER(x)[0] * REAL(y)[0] ) ;
' )
fx( 2L, 5 ) # should be 10
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
fx <- inline::cxxfunction( signature(x = "integer", y = "numeric" ) , '
return ScalarReal( INTEGER(x)[0] * REAL(y)[0] ) ;
' )
pkgbuild::has_build_tools(debug = TRUE)
fx <- inline::cxxfunction( signature(x = "integer", y = "numeric" ) , '
return ScalarReal( INTEGER(x)[0] * REAL(y)[0] ) ;
' )
install.packages("devtools")
fx <- inline::cxxfunction( signature(x = "integer", y = "numeric" ) , '
return ScalarReal( INTEGER(x)[0] * REAL(y)[0] ) ;
' )
fx <- inline::cxxfunction( signature(x = "integer", y = "numeric" ) , '
return ScalarReal( INTEGER(x)[0] * REAL(y)[0] ) ;
' )
pkgbuild::has_build_tools(debug = TRUE)
fx <- inline::cxxfunction( signature(x = "integer", y = "numeric" ) , '
return ScalarReal( INTEGER(x)[0] * REAL(y)[0] ) ;
' )
install.packages("devtools")
fx <- inline::cxxfunction( signature(x = "integer", y = "numeric" ) , '
return ScalarReal( INTEGER(x)[0] * REAL(y)[0] ) ;
' )
install.packages("inline")
fx <- inline::cxxfunction( signature(x = "integer", y = "numeric" ) , '
return ScalarReal( INTEGER(x)[0] * REAL(y)[0] ) ;
' )
fx( 2L, 5 ) # should be 10
install.packages("brms")
install.packages("Rcpp")
install.packages("Rcpp")
list.dirs(file.path(R.home(), "etc"))[ -1 ]
Sys.getenv()['PATH']
library(tidyverse)
setsizes <- c(1, 4, 8, 16)
df <- data.frame(setsizes)
df_plot <- df %>%
mutate(fish = 250 + 80*log(setsizes),
bird = 250 + 50*log(setsizes),
functional = fish + 10,
exhaustive = fish+bird - 250)
df_plot <- df %>%
mutate(fish = 250 + 80*log(setsizes),
bird = 250 + 50*log(setsizes),
functional = fish + 10,
exhaustive = fish+bird - 250)  %>%
gather(display, rt, -setsizes)
df_plot <- df %>%
mutate(fish = 250 + 80*log(setsizes),
bird = 250 + 50*log(setsizes),
functional = fish + 10,
exhaustive = fish+bird - 250
)
View(df_plot)
df_plot <- df %>%
mutate(fish = 250 + 80*log(setsizes),
bird = 250 + 50*log(setsizes),
functional = fish + 10,
exhaustive = fish+bird - 250)  %>%
gather(display, rt, -setsizes)
View(df_plot)
setwd("D:/Box Sync/Projects/Functional Set Size/FSS/functional_setsize_efficient_search/Experiment 1/Data")
library(tidyverse)
library(ggplot2)
library(ez)
library(TOSTER)
library(BayesFactor)
all_data$RT <- as.numeric(as.character(all_data$RT))
all_data <- read.csv("all.csv", header=TRUE)
cleaner_df <- all_data %>%
filter(sub_id != 26) %>%
filter(as.numeric(sub_id) <= 34) %>%
filter(RT > 200 & RT < 1500)
100* (1 - (nrow(cleaner_df) / nrow(after_removal)))
# data missing for subject 11
# computer error for subject 26
# total subjects collected: 39, but pre-reg stated only 32 will be used
clean_df <- all_data %>% filter(Error == 0) %>%
filter(sub_id != 26) %>%
filter(as.numeric(sub_id) <= 34) %>%
filter(RT < 1500 , RT > 200) %>%
mutate(total_setsize = bird_setsize + fish_setsize)
removed_trials <- (nrow(clean_df) - nrow(cleaner_df)) / nrow(clean_df)
clean_df$log_bird_setsize <- log(clean_df$bird_setsize+1)
clean_df$log_fish_setsize <- log(clean_df$fish_setsize+1)
clean_df$fish_setsize <- as.factor(clean_df$fish_setsize)
clean_df$bird_setsize <- as.factor(clean_df$bird_setsize)
summary_df <- clean_df %>%
group_by(fish_setsize, bird_setsize) %>%
summarise(meanRT = mean(RT), SD = sd(RT))
summary_df$fish_setsize <- summary_df$fish_setsize+1
summary_df$fish_setsize <- as.numeric(summary_df$fish_setsize)
summary_df$bird_setsize <- as.factor(summary_df$bird_setsize)
ggplot(summary_df, aes(x=fish_setsize, y=meanRT, color=bird_setsize)) +
geom_point(size = 3) +
# geom_line() +
stat_smooth(method="lm", formula=y~log(x), se=FALSE, linetype=1, size=1) +
scale_color_manual(values=c('#000000', '#00007f', '#9E1E1E', "#b2b2ff")) +
scale_color_manual(values=c('#b2b2ff', '#0000e5', '#9E1E1E', "#000000"))
summary_df <- clean_df %>%
group_by(fish_setsize, bird_setsize) %>%
summarise(meanRT = mean(RT), SD = sd(RT))
ggplot(summary_df, aes(x=fish_setsize, y=meanRT, color=bird_setsize)) +
geom_point(size = 3) +
# geom_line() +
stat_smooth(method="lm", formula=y~log(x), se=FALSE, linetype=1, size=1) +
scale_color_manual(values=c('#000000', '#00007f', '#9E1E1E', "#b2b2ff")) +
scale_color_manual(values=c('#b2b2ff', '#0000e5', '#9E1E1E', "#000000"))
ggplot(summary_df, aes(x=fish_setsize, y=meanRT, color=bird_setsize)) +
geom_point(size = 3) +
# geom_line() +
stat_smooth(method="lm", formula=y~log(x), se=FALSE, linetype=1, size=1) +
scale_color_manual(values=c('#000000', '#00007f', '#9E1E1E', "#b2b2ff"))
ggplot(summary_df, aes(x=fish_setsize, y=meanRT, color=bird_setsize)) +
geom_point(size = 3) +
geom_line() +
stat_smooth(method="lm", formula=y~log(x), se=FALSE, linetype=1, size=1) +
scale_color_manual(values=c('#000000', '#00007f', '#9E1E1E', "#b2b2ff")) +
scale_color_manual(values=c('#b2b2ff', '#0000e5', '#9E1E1E', "#000000"))
summary_df$fish_setsize <- as.numeric(summary_df$fish_setsize)
ggplot(summary_df, aes(x=fish_setsize, y=meanRT, color=bird_setsize)) +
geom_point(size = 3) +
# geom_line() +
stat_smooth(method="lm", formula=y~log(x), se=FALSE, linetype=1, size=1) +
scale_color_manual(values=c('#000000', '#00007f', '#9E1E1E', "#b2b2ff")) +
scale_color_manual(values=c('#b2b2ff', '#0000e5', '#9E1E1E', "#000000"))
ggplot(summary_df, aes(x=bird_setsize, y=meanRT, color=fish_setsize)) +
geom_point(size = 3) +
# geom_line() +
stat_smooth(method="lm", formula=y~log(x), se=FALSE, linetype=1, size=1) +
scale_color_manual(values=c('#000000', '#00007f', '#9E1E1E', "#b2b2ff")) +
scale_color_manual(values=c('#b2b2ff', '#0000e5', '#9E1E1E', "#000000"))
summary_df$fish_setsize <- as.numeric(summary_df$fish_setsize)
summary_df$bird_setsize <- as.factor(summary_df$bird_setsize)
ggplot(summary_df, aes(x=fish_setsize, y=meanRT, color=bird_setsize)) +
geom_point(size = 3) +
# geom_line() +
stat_smooth(method="lm", formula=y~log(x), se=FALSE, linetype=1, size=1) +
scale_color_manual(values=c('#000000', '#00007f', '#9E1E1E', "#b2b2ff")) +
scale_color_manual(values=c('#b2b2ff', '#0000e5', '#9E1E1E', "#000000"))
summary_df$fish_setsize <- as.numeric(as.character((summary_df$fish_setsize))
summary_df$fish_setsize <- as.numeric(as.character((summary_df$fish_setsize))
summary_df$fish_setsize <- as.numeric(as.character((summary_df$fish_setsize)))
summary_df$bird_setsize <- as.factor(summary_df$bird_setsize)
ggplot(summary_df, aes(x=fish_setsize, y=meanRT, color=bird_setsize)) +
geom_point(size = 3) +
# geom_line() +
stat_smooth(method="lm", formula=y~log(x), se=FALSE, linetype=1, size=1) +
scale_color_manual(values=c('#000000', '#00007f', '#9E1E1E', "#b2b2ff")) +
scale_color_manual(values=c('#b2b2ff', '#0000e5', '#9E1E1E', "#000000"))
View(summary_df)
all_data <- read.csv("all.csv", header=TRUE)
all_data$RT <- as.numeric(as.character(all_data$RT))
after_removal <- all_data %>%
filter(sub_id != 26) %>%
filter(as.numeric(sub_id) <= 34)
cleaner_df <- all_data %>%
filter(sub_id != 26) %>%
filter(as.numeric(sub_id) <= 34) %>%
filter(RT > 200 & RT < 1500)
100* (1 - (nrow(cleaner_df) / nrow(after_removal)))
# data missing for subject 11
# computer error for subject 26
# total subjects collected: 39, but pre-reg stated only 32 will be used
clean_df <- all_data %>% filter(Error == 0) %>%
filter(sub_id != 26) %>%
filter(as.numeric(sub_id) <= 34) %>%
filter(RT < 1500 , RT > 200) %>%
mutate(total_setsize = bird_setsize + fish_setsize)
View(clean_df)
clean_df$log_bird_setsize <- log(clean_df$bird_setsize+1)
clean_df$log_fish_setsize <- log(clean_df$fish_setsize+1)
summary_df <- clean_df %>%
group_by(fish_setsize, bird_setsize) %>%
summarise(meanRT = mean(RT), SD = sd(RT))
summary_df$fish_setsize <- as.numeric(as.character((summary_df$fish_setsize)))
summary_df$bird_setsize <- as.factor(summary_df$bird_setsize)
ggplot(summary_df, aes(x=fish_setsize, y=meanRT, color=bird_setsize)) +
geom_point(size = 3) +
# geom_line() +
stat_smooth(method="lm", formula=y~log(x), se=FALSE, linetype=1, size=1) +
scale_color_manual(values=c('#000000', '#00007f', '#9E1E1E', "#b2b2ff")) +
scale_color_manual(values=c('#b2b2ff', '#0000e5', '#9E1E1E', "#000000"))
View(summary_df)
summary_df <- clean_df %>%
group_by(fish_setsize, bird_setsize) %>%
summarise(meanRT = mean(RT), SD = sd(RT))
# summary_df$fish_setsize <- as.numeric(as.character((summary_df$fish_setsize)))
summary_df$bird_setsize <- as.factor(summary_df$bird_setsize)
ggplot(summary_df, aes(x=fish_setsize, y=meanRT, color=bird_setsize)) +
geom_point(size = 3) +
# geom_line() +
stat_smooth(method="lm", formula=y~log(x), se=FALSE, linetype=1, size=1) +
scale_color_manual(values=c('#000000', '#00007f', '#9E1E1E', "#b2b2ff")) +
scale_color_manual(values=c('#b2b2ff', '#0000e5', '#9E1E1E', "#000000"))
summary_df <- clean_df %>%
group_by(fish_setsize, bird_setsize) %>%
summarise(meanRT = mean(RT), SD = sd(RT))
summary_df$fish_setsize <- summary_df$fish_setsize+1
# summary_df$fish_setsize <- as.numeric(as.character((summary_df$fish_setsize)))
summary_df$bird_setsize <- as.factor(summary_df$bird_setsize)
ggplot(summary_df, aes(x=fish_setsize, y=meanRT, color=bird_setsize)) +
geom_point(size = 3) +
# geom_line() +
stat_smooth(method="lm", formula=y~log(x), se=FALSE, linetype=1, size=1) +
scale_color_manual(values=c('#000000', '#00007f', '#9E1E1E', "#b2b2ff")) +
scale_color_manual(values=c('#b2b2ff', '#0000e5', '#9E1E1E', "#000000"))
ggplot(summary_df, aes(x=bird_setsize, y=meanRT, color=fish_setsize)) +
geom_point(size = 3) +
# geom_line() +
stat_smooth(method="lm", formula=y~log(x), se=FALSE, linetype=1, size=1) +
scale_color_manual(values=c('#000000', '#00007f', '#9E1E1E', "#b2b2ff")) +
scale_color_manual(values=c('#b2b2ff', '#0000e5', '#9E1E1E', "#000000"))
summary_df <- clean_df %>%
group_by(fish_setsize, bird_setsize) %>%
summarise(meanRT = mean(RT), SD = sd(RT))
summary_df$fish_setsize <- summary_df$fish_setsize+1
ggplot(summary_df, aes(x=fish_setsize, y=meanRT, color=as.factor(bird_setsize))) +
geom_point(size = 3) +
# geom_line() +
stat_smooth(method="lm", formula=y~log(x), se=FALSE, linetype=1, size=1) +
scale_color_manual(values=c('#000000', '#00007f', '#9E1E1E', "#b2b2ff")) +
scale_color_manual(values=c('#b2b2ff', '#0000e5', '#9E1E1E', "#000000"))
ggplot(summary_df, aes(x=bird_setsize, y=meanRT, color=as.factor(fish_setsize))) +
geom_point(size = 3) +
# geom_line() +
stat_smooth(method="lm", formula=y~log(x), se=FALSE, linetype=1, size=1) +
scale_color_manual(values=c('#000000', '#00007f', '#9E1E1E', "#b2b2ff")) +
scale_color_manual(values=c('#b2b2ff', '#0000e5', '#9E1E1E', "#000000"))
individual_df <- clean_df %>%
group_by(sub_id, fish_setsize, bird_setsize) %>%
summarise(meanRT = mean(RT))
individual_df$fish_setsize <- individual_df$fish_setsize+1
ggplot(individual_df %>% filter(sub_id !=25), aes(x=fish_setsize, y=meanRT, color=bird_setsize)) +
geom_point(size = 3) +
# geom_line() +
stat_smooth(method="lm", formula=y~log(x), se=FALSE, linetype=1, size=1) +
scale_color_manual(values=c('#000000', '#00007f', '#9E1E1E', "#b2b2ff")) +
scale_color_manual(values=c('#b2b2ff', '#0000e5', '#9E1E1E', "#000000")) +
facet_wrap(~sub_id)
ezANOVA(individual_df,
RT,
within=c(fish_setsize, bird_setsize),
wid = sub_id
)
ezANOVA(individual_df,
meanRT,
within=c(fish_setsize, bird_setsize),
wid = sub_id
)
individual_df$bird_setsize <- as.factor(individual_df$bird_setsize)
individual_df$fish_setsize <- as.factor(individual_df$fish_setsize)
ezANOVA(individual_df,
meanRT,
within=c(fish_setsize, bird_setsize),
wid = sub_id
)
ggplot(summary_df, aes(x=bird_setsize, y=meanRT, color=as.factor(fish_setsize))) +
geom_point(size = 3) +
# geom_line() +
stat_smooth(method="lm", formula=y~log(x), se=FALSE, linetype=1, size=1) +
scale_color_manual(values=c('#000000', '#00007f', '#9E1E1E', "#b2b2ff")) +
scale_color_manual(values=c('#b2b2ff', '#0000e5', '#9E1E1E', "#000000"))
ezANOVA(individual_df$fish_setsize==1,
meanRT,
within=c(bird_setsize),
wid=sub_id)
ezANOVA(individual_df $>$ filter(fish_setsize==1),
meanRT,
within=c(bird_setsize),
wid=sub_id)
ezANOVA(individual_df %>% filter(fish_setsize==1),
meanRT,
within=c(bird_setsize),
wid=sub_id)
#### analysis by tloc
tloc_df <- clean_df %>%
group_by(tloc) %>%
summarise(RT = mean(RT)) %>%
mutate(x=if_else(tloc%%10 == 0, 10, tloc%%10),
y=floor(-tloc/10.1)) %>%
mutate(roundedRT = round(RT))
ggplot(tloc_df, aes(x=x, y=y, size=RT, color=RT)) +
geom_point() +
geom_text(aes(label=roundedRT), hjust=0.5, vjust=2, size=4) +
coord_cartesian(y = c(-10.5, -6.5), x = c(0.5, 10.5))
#### analysis by tloc
tloc_df <- clean_df %>%
filter(bird_setsize == 0) %>%
group_by(tloc) %>%
summarise(RT = mean(RT)) %>%
mutate(x=if_else(tloc%%10 == 0, 10, tloc%%10),
y=floor(-tloc/10.1)) %>%
mutate(roundedRT = round(RT))
ggplot(tloc_df, aes(x=x, y=y, size=RT, color=RT)) +
geom_point() +
geom_text(aes(label=roundedRT), hjust=0.5, vjust=2, size=4) +
coord_cartesian(y = c(-10.5, -6.5), x = c(0.5, 10.5))
#### analysis by tloc
tloc_df <- clean_df %>%
filter(bird_setsize == 4) %>%
group_by(tloc) %>%
summarise(RT = mean(RT)) %>%
mutate(x=if_else(tloc%%10 == 0, 10, tloc%%10),
y=floor(-tloc/10.1)) %>%
mutate(roundedRT = round(RT))
ggplot(tloc_df, aes(x=x, y=y, size=RT, color=RT)) +
geom_point() +
geom_text(aes(label=roundedRT), hjust=0.5, vjust=2, size=4) +
coord_cartesian(y = c(-10.5, -6.5), x = c(0.5, 10.5))
#### analysis by tloc
tloc_df <- clean_df %>%
filter(bird_setsize == 8) %>%
group_by(tloc) %>%
summarise(RT = mean(RT)) %>%
mutate(x=if_else(tloc%%10 == 0, 10, tloc%%10),
y=floor(-tloc/10.1)) %>%
mutate(roundedRT = round(RT))
ggplot(tloc_df, aes(x=x, y=y, size=RT, color=RT)) +
geom_point() +
geom_text(aes(label=roundedRT), hjust=0.5, vjust=2, size=4) +
coord_cartesian(y = c(-10.5, -6.5), x = c(0.5, 10.5))
#### analysis by tloc
tloc_df <- clean_df %>%
filter(bird_setsize == 16) %>%
group_by(tloc) %>%
summarise(RT = mean(RT)) %>%
mutate(x=if_else(tloc%%10 == 0, 10, tloc%%10),
y=floor(-tloc/10.1)) %>%
mutate(roundedRT = round(RT))
ggplot(tloc_df, aes(x=x, y=y, size=RT, color=RT)) +
geom_point() +
geom_text(aes(label=roundedRT), hjust=0.5, vjust=2, size=4) +
coord_cartesian(y = c(-10.5, -6.5), x = c(0.5, 10.5))
